    // we're getting the newest codel, from the old one, c
    public static Codel getNextCodel(Board board, Block block, int attempt) throws PietCommandNotFoundException {

        // We are not able to find another valid Codel in any of the current
        // blocks Codels.
        if (attempt > 8) {
            program.end();
        }

        Codel next = null;

        // next = getNextCodel(block);

        // if(!board.isInBounds(next) || board.getColor(next).equals(PietColor.BLACK)) {

        //     director.rotateByAttempt(attempt);

        //     switch(director.getDP()) {
        //         case RIGHT:
        //             next.setY(next.getY() - 1);
        //             break;
        //         case DOWN:
        //             next.setX(next.getX() - 1);
        //             break;
        //         case LEFT:
        //             next.setY(next.getY() + 1);
        //             break;
        //         case UP:
        //             next.setX(next.getX() + 1);
        //             break;
        //     }
        // }

        // return getNextCodel(board, block, attempt + 1);

        int[] right = new int[] {0, -1};
        int[] down = new int[] {-1, 0};
        int[] left = new int[] {0, 1};
        int[] up = new int[] {1, 0};


        // Try to find the next Codel given the current block and director.
        // If the next Codel is not valid, rotate the director and try again.
        switch (director.getDP()) {
            case RIGHT:
                next = getNextCodel(block);

                if (!board.isInBounds(next) || board.getColor(next).equals(PietColor.BLACK)) {
                    director.rotateByAttempt(attempt);

                    next.setX(next.getX() + right[0]);
                    next.setY(next.getY() + right[1]);
                    return getNextCodel(board, block, attempt + 1);
                }
                break;

            case DOWN:
                next = getNextCodel(block);

                if (!board.isInBounds(next) || board.getColor(next).equals(PietColor.BLACK)) {
                    director.rotateByAttempt(attempt);

                    next.setX(next.getX() + down[0]);
                    next.setY(next.getY() + down[1]);
                    return getNextCodel(board, block, attempt + 1);
                }
                break;

            case LEFT:
                next = getNextCodel(block);

                if (!board.isInBounds(next) || board.getColor(next).equals(PietColor.BLACK)) {
                    director.rotateByAttempt(attempt);

                    next.setX(next.getX() + down[0]);
                    next.setY(next.getY() + down[1]);
                    return getNextCodel(board, block, attempt + 1);
                }
                break;

            case UP:
                next = getNextCodel(block);

                if (!board.isInBounds(next) || board.getColor(next).equals(PietColor.BLACK)) {
                    director.rotateByAttempt(attempt);

                    next.setX(next.getX() + down[0]);
                    next.setY(next.getY() + down[1]);
                    return getNextCodel(board, block, attempt + 1);
                }
                break;
            default:
                throw new PietCommandNotFoundException("error");
        }

        return next;
    }
t
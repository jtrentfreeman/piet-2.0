/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.frejt.piet.controller;

import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.frejt.azure.eventhubs.PietMessageRequest;
// import com.frejt.azure.eventhubs.SenderAAD;
import com.frejt.azure.eventhubs.ServiceBus;
import com.frejt.azure.storage.BlobStorage;
import com.frejt.piet.entity.Board;
import com.frejt.piet.exception.PietExecutionException;
import com.frejt.piet.utils.reader.PietFileReader;

public class Interpreter {

    private static final Logger log = LogManager.getLogger(Interpreter.class);
    
    /**
     * Entry point to the program.
     * 
     * @param args: args[0] - String holding the image's file path
     */
    public static void main(String[] args) {

        ExecutorService service = Executors.newFixedThreadPool(5);

        List<Future<String>> output = new ArrayList<>();

        List<String> input = Arrays.asList(
            "C:\\Users\\frejt\\code\\piet-2\\app\\examples\\ppm\\frejt-1.ppm",
            "C:\\Users\\frejt\\code\\piet-2\\app\\examples\\ppm\\hi.ppm",
            "C:\\Users\\frejt\\code\\piet-2\\app\\examples\\ppm\\nfib.ppm",
            "C:\\Users\\frejt\\code\\piet-2\\app\\examples\\png\\Piet_hello.png"
        );

        try {
            for(int i = 0; i < 4; i++) {

                // PietMessageRequest request = ServiceBus.receiveSingleMessage();
                // Path runFile = BlobStorage.downloadBlob(request.getMessage());
                // Path runFile = InterpreterUtils.getRunFile(args);

                Path runFile = Paths.get(input.get(i));

                PietProgramRunner runner = new PietProgramRunner(runFile);
                output.add(service.submit(runner));

                // TimeUnit.SECONDS.sleep(5);
        
            }

            for(Future<String> future: output) {
                log.info(future.get());
            }

        } catch(Exception e) {
            log.error("Ran into an unfixable error: " + e.getMessage());
        }

        System.exit(0);
    }
}

/**
 * Thank you, Larry Tesler.
 * 
 * Realized that ^ may sound like I was copy+pasting from outside sources, I
 * wasn't.
 * 
 * Some of the code (converting numbers -> colors) was repetitive, where I
 * duplicated a lot of code.
 * 
 * Larry Tesler was the creator of the copy & paste commands, according to
 * Wikipedia.
 * 
 * All of this code was written by myself (Trent Freeman), and no code was taken
 * from any outside sources.
 * 
 * 
 * Also shout of to Sean Szumlanski, a (former) CS professor at UCF.
 * 
 * He initially introduced me to Piet and got me interested in writing this
 * program, which has taken up a large chunk of time (which I've mostly
 * enjoyed).
 */